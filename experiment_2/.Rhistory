d_2$layout_c1 <- dplyr::recode(d_2$layout, "1" = 2, "2" = -1, "3" = -1)
d_2$layout_c2 <- dplyr::recode(d_2$layout, "1" = 0, "2" = 1, "3" = -1)
View(d_2)
d_2$user_c1 <- dplyr::recode(d_2$user, "creator" = 2, "sharer" = -1, "lurker" = -1)
d_2$user_c2 <- dplyr::recode(d_2$user, "creator" = 0, "sharer" = 1, "lurker" = -1)
d_2$layout_c1 <- dplyr::recode(d_2$layout, "1" = 2, "2" = -1, "3" = -1)
d_2$layout_c2 <- dplyr::recode(d_2$layout, "1" = 0, "2" = 1, "3" = -1)
mod2 <- lm(preference ~ (user_c1 + user_c2) * (layout_c1 + layout_c2), data = d_2)
summary(mod2)
Anova(mod2, type = 3, test = "F")
Anova(mod2, type = 3, test = "F") %>% eta_squared()
View(d_2)
d_graph_x <- expand.grid(user = c("creator", "sharer", "lurker"),
layout = c("1", "2", "3"))
View(d_graph_x)
d_graph <- ggplotPredict(mod2, d_graph_x)
library(tidyverse)
library(lme4)
library(car)
library(psych)
library(effectsize)
library(kableExtra)
source("610_710_functions.R")
source("orthogonalContrastMaker.R")
d_graph_x <- expand.grid(user = c("creator", "sharer", "lurker"),
layout = c("1", "2", "3"))
d_graph <- ggplotPredict(mod2, d_graph_x)
m_graph <- lm(preference  ~ user * layout, data = d_2)
d_graph_x <- expand.grid(user = c("creator", "sharer", "lurker"),
layout = c("1", "2", "3"))
d_graph <- ggplotPredict(m_graph, d_graph_x)
class(d_2$layout)
d_2$layout <- dplyr::recode(d$layout,
"1" = "1",
"2" = "2",
"3" = "3")
d_2$layout <- dplyr::recode(d_2$layout,
"1" = "1",
"2" = "2",
"3" = "3")
class(d_2$layout)
d_2$layout <- dplyr::recode(d_2$layout,
"1" = "1",
"2" = "2",
"3" = "3")
m_graph <- lm(preference  ~ user * layout, data = d_2)
d_graph_x <- expand.grid(user = c("creator", "sharer", "lurker"),
layout = c("1", "2", "3"))
d_graph <- ggplotPredict(m_graph, d_graph_x)
View(d_graph)
d_graph$preference = d_graph$Predicted
d_2$layout <- dplyr::recode(d_2$layout,
"1" = "1",
"2" = "2",
"3" = "3")
m_graph <- lm(preference  ~ user * layout, data = d_2)
d_graph_x <- expand.grid(user = c("creator", "sharer", "lurker"),
layout = c("1", "2", "3"))
d_graph <- ggplotPredict(m_graph, d_graph_x)
d_graph$preference = d_graph$Predicted
plot <- ggplot(d_graph, aes(x = layout, y = preference, fill = layout)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymax = CIHi, ymin = CILo), width = .25) +
facet_wrap(~user) +
xlab("Allele Type") +
ylab("Depression") +
scale_fill_manual("legend", values = c("SS" = "#5C2952", "LS" = "#29525C", "LL" = "#525C29")) +
theme_bw(base_size = 14) +
theme(axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_blank())
plot
d_2$layout <- dplyr::recode(d_2$layout,
"1" = "1",
"2" = "2",
"3" = "3")
m_graph <- lm(preference  ~ user * layout, data = d_2)
d_graph_x <- expand.grid(user = c("creator", "sharer", "lurker"),
layout = c("1", "2", "3"))
d_graph <- ggplotPredict(m_graph, d_graph_x)
d_graph$preference = d_graph$Predicted
plot <- ggplot(d_graph, aes(x = layout, y = preference, fill = layout)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymax = CIHi, ymin = CILo), width = .25) +
facet_wrap(~user) +
xlab("Layout Type") +
ylab("Preference") +
scale_fill_manual("legend", values = c("SS" = "#5C2952", "LS" = "#29525C", "LL" = "#525C29")) +
theme_bw(base_size = 14) +
theme(axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_blank())
plot
d_2$layout <- dplyr::recode(d_2$layout,
"1" = "1",
"2" = "2",
"3" = "3")
m_graph <- lm(preference  ~ user * layout, data = d_2)
d_graph_x <- expand.grid(user = c("creator", "sharer", "lurker"),
layout = c("1", "2", "3"))
d_graph <- ggplotPredict(m_graph, d_graph_x)
d_graph$preference = d_graph$Predicted
plot <- ggplot(d_graph, aes(x = layout, y = preference, fill = layout)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymax = CIHi, ymin = CILo), width = .25) +
facet_wrap(~user) +
xlab("Layout Type") +
ylab("Preference") +
scale_fill_manual("legend", values = c("1" = "#5C2952", "2" = "#29525C", "3" = "#525C29")) +
theme_bw(base_size = 14) +
theme(axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = "none",
legend.background = element_blank())
plot
library(tidymodels)
library(tidyverse)
library(janitor)
library(kableExtra)
library(skimr)
library(cowplot)
library(doParallel)
library(ranger)
library(here)
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true")
theme_set(theme_half_open())
path_data <- "C:/Users/zhong/Downloads/R"
data_all <- read.csv(here(path_data,"airline_passenger_satisfaction.csv")) %>%
clean_names(case="snake") %>%
mutate(across(where(is.character), tidy_responses)) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(satisfaction = factor(satisfaction, levels = c("satisfied", "neutral_or_dissatisfied"))) %>%
glimpse()
tab <- function(df, var, sort = FALSE) {
df %>% count({{ var }}, sort = sort) %>%
mutate(prop = n / sum(n))
}
data_all %>% tab(satisfaction)
set.seed(12345)
splits_test <- data_all %>%
initial_split(prop = 2/3, strata = "satisfaction")
data_train <- splits_test %>%
analysis()
data_test <- splits_test %>%
assessment()
data_train %>% skim_all()
set.seed(12345)
splits_boot <- data_train %>%
bootstraps(times = 100, strata = "satisfaction")
rec_knn <- recipe(satisfaction ~ ., data = data_train) %>%
step_rm(id) %>%
step_impute_median(all_numeric()) %>%
step_impute_mode(all_nominal()) %>%
step_dummy()
step_range(all_predictors())
rec_knn <- recipe(satisfaction ~ ., data = data_train) %>%
step_rm(id) %>%
step_impute_median(all_numeric()) %>%
step_impute_mode(all_nominal()) %>%
step_dummy() %>%
step_range(all_predictors())
hyper_grid <- expand.grid(neighbors = seq(1, 133, by = 3)) # max cases =3*133=399
fits_knn <-
nearest_neighbor(neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
tune_grid(preprocessor = rec_knn, resamples = splits_boot, grid = hyper_grid, metrics = metric_set(yardstick::kap))
rec_knn <- recipe(satisfaction ~ ., data = data_train) %>%
step_rm(id) %>%
step_impute_median(all_numeric()) %>%
step_impute_mode(all_nominal()) %>%
step_dummy(all_nominal_predictors()) %>%
step_range(all_predictors())
hyper_grid <- expand.grid(neighbors = seq(1, 133, by = 3)) # max cases =3*133=399
fits_knn <-
nearest_neighbor(neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
tune_grid(preprocessor = rec_knn, resamples = splits_boot, grid = hyper_grid, metrics = metric_set(yardstick::kap))
plot_hyperparameters(fits_knn, hp1 = "neighbors", metric = "kap")
feat_knn <- rec_knn %>%
make_features(data_train)
fit_knn_best <- nearest_neighbor(neighbors = select_best(fits_knn)$neighbors) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(satisfaction ~ ., data = feat_knn)
feat_knn_test <- rec_knn %>%
make_features(data_train, data_test)
cm <- tibble(truth = feat_knn_test$satisfaction,
estimate = predict(fit_knn_best, feat_knn_test)$.pred_class) %>%
conf_mat(truth, estimate)
cm %>% summary()
options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")))
install.packages('IRkernel',dependencies=TRUE)
IRkernel::installspec(user = FALSE)
R.home()
IRkernel::installspec(user = FALSE)#To install system-wide, set user to False in the installspec command:
options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")))#设置镜像源
install.packages('IRkernel',dependencies=TRUE)
install.packages("IRkernel", dependencies = TRUE)
IRkernel::installspec(user = FALSE)#To install system-wide, set user to False in the installspec command:
install.packages('IRkernel')
install.packages("IRkernel")
install.packages('repr','IRdisplay','evaluate','crayon','pbdZMQ','devtools','uuid','digest')
library(devtools)
install_github("IRkernel/IRkernel")
IRkernel::installspec()
IRkernel::installspec(user=FALSE)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
.libPaths()
install.packages("ggplot2")
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages("IRkernel")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("janitor")
install.packages("cowplot")
install.packages("kableExtra")
install.packages("tidymodels")
install.packages("devtools")
install.packages("skimr")
#calculate the total violation value
d$violation1 <- d$violation1_1 + d$violation1_2 + d$violation1_3 + d$violation1_4 + d$violation1_5
d$violation5 <- d$violation5_1 + d$violation5_2 + d$violation5_3 + d$violation5_4 + d$violation5_5
library(cowplot, include.only = "plot_grid")
library(janitor, include.only = "clean_names")
library(cowplot, include.only = "plot_grid")
library(kableExtra, exclude = "group_rows")
library(tidyverse)
library(tidymodels)
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true")
#load data
d <- read_csv("humor_r.csv")
#load data
d <- read_csv("humor_r.csv")
setwd("C:/Users/zhong/hw2")
library(janitor, include.only = "clean_names")
library(cowplot, include.only = "plot_grid")
library(kableExtra, exclude = "group_rows")
library(tidyverse)
library(tidymodels)
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true")
#load data
d <- read_csv("humor_r.csv")
#calculate the total violation value
d$violation1 <- d$violation1_1 + d$violation1_2 + d$violation1_3 + d$violation1_4 + d$violation1_5
d$violation2 <- d$violation2_1 + d$violation2_2 + d$violation2_3 + d$violation2_4 + d$violation2_5
d$violation3 <- d$violation3_1 + d$violation3_2 + d$violation3_3 + d$violation3_4 + d$violation3_5
d$violation4 <- d$violation4_1 + d$violation4_2 + d$violation4_3 + d$violation4_4 + d$violation4_5
d$violation5 <- d$violation5_1 + d$violation5_2 + d$violation5_3 + d$violation5_4 + d$violation5_5
View(d)
d2$funny <- d$funny1 + d$funny2
d2<- data.frame(funny)
d2$funny <- d$funny1 + d$funny2
d2<- data.frame(funny)
funny <- d$funny1 + d$funny2
d2<- data.frame(funny)
View(d2)
View(d)
View(d)
state <- d$state*5
state <- d$state + d$state + d$state + d$state + d$state
d2<- data.frame(state)
View(d2)
state <- d$state + d$state + d$state + d$state + d$state
state <- d$state + d$state
View(d2)
View(d)
funny <- rbind(d$funny1 + d$funny2 +d$funny3 + d$funny4 +d$funn5)
funny <- rbind(d$funny1 + d$funny2 +d$funny3 + d$funny4 +d$funny5)
d2<- data.frame(funny)
View(d2)
View(funny)
funny <- rbind(d$funny1,d$funny2,d$funny3,d$funny4,d$funny5)
d2<- data.frame(funny)
View(d2)
library(dplyr)
df <- data.frame(
col1 = c("A", "B", "C"),
col2 = c("X", "Y", "Z"),
col3 = c("1", "2", "3")
)
# 使用unite()函数将多列合并为一列，并存储到新列new_col中
df <- df %>%
unite(new_col, col1, col2, col3, sep = "_", remove = FALSE)
# 打印结果
print(df)
funny <- c(d$funny1,d$funny2,d$funny3,d$funny4,d$funny5)
d2<- data.frame(funny)
View(d)
View(d2)
state <- c(d$state + d$state + d$state + d$state + d$state)
funny <- c(d$funny1,d$funny2,d$funny3,d$funny4,d$funny5)
arousal <- c(d$arousal1,d$arousal2,d$arousal3,d$arousal4,d$arousal5)
violate <- c(d$violate1,d$violate2,d$violate3,d$violate4,d$violate5)
jump <- c(d$jump1,d$jump2,d$jump3,d$jump4,d$jump5)
accept <- c(d$accept1,d$accept2,d$accept3,d$accept4,d$accept5)
d2<- data.frame(state, funny, arousal, violate, accept, jump)
d2<- data.frame(state, funny, arousal, violate, accept, jump)
state <- c(d$state + d$state + d$state + d$state + d$state)
funny <- c(d$funny1,d$funny2,d$funny3,d$funny4,d$funny5)
arousal <- c(d$arousal1,d$arousal2,d$arousal3,d$arousal4,d$arousal5)
violate <- c(d$violate1,d$violate2,d$violate3,d$violate4,d$violate5)
d2<- data.frame(violate)
View(d2)
#load data
d <- read_csv("humor_r.csv")
#calculate the total violation value
d$violation1 <- d$violation1_1 + d$violation1_2 + d$violation1_3 + d$violation1_4 + d$violation1_5
d$violation2 <- d$violation2_1 + d$violation2_2 + d$violation2_3 + d$violation2_4 + d$violation2_5
d$violation3 <- d$violation3_1 + d$violation3_2 + d$violation3_3 + d$violation3_4 + d$violation3_5
d$violation4 <- d$violation4_1 + d$violation4_2 + d$violation4_3 + d$violation4_4 + d$violation4_5
d$violation5 <- d$violation5_1 + d$violation5_2 + d$violation5_3 + d$violation5_4 + d$violation5_5
violate <- c(d$violate1,d$violate2,d$violate3,d$violate4,d$violate5)
#calculate the total violation value
d$violation1 <- d$violation1_1 + d$violation1_2 + d$violation1_3 + d$violation1_4 + d$violation1_5
View(d)
violation <- c(d$violation1,d$violation2,d$violation3,d$violation4,d$violation5)
d2<- data.frame(violation)
jump <- c(d$jump1,d$jump2,d$jump3,d$jump4,d$jump5)
accept <- c(d$accept1,d$accept2,d$accept3,d$accept4,d$accept5)
state <- c(d$state + d$state + d$state + d$state + d$state)
state <- c(d$state,d$state,d$state,d$state,d$state)
state <- c(d$state,d$state,d$state,d$state,d$state)
funny <- c(d$funny1,d$funny2,d$funny3,d$funny4,d$funny5)
arousal <- c(d$arousal1,d$arousal2,d$arousal3,d$arousal4,d$arousal5)
violation <- c(d$violation1,d$violation2,d$violation3,d$violation4,d$violation5)
jump <- c(d$jump1,d$jump2,d$jump3,d$jump4,d$jump5)
accept <- c(d$accept1,d$accept2,d$accept3,d$accept4,d$accept5)
d2<- data.frame(violation)
View(d2)
d2<- data.frame(state,funny,arousal,violation,junp,accept)
d2<- data.frame(state,funny,arousal,violation,jump,accept)
View(d2)
View(d)
d2 |> plot_grouped_box_violin("state", "funny")
d2 |> plot_grouped_box_violin("arousal", "funny")
d2 |> plot_scatter("violation", "funny")
d2 |> plot_grouped_box_violin("accept", "funny")
d2 |> plot_grouped_box_violin("jump", "funny")
m1 <- lm(funny ~ state,data = d2)
summary(m1)
d2 |> plot_grouped_box_violin("state", "funny")
m1 <- lm(funny ~ state,data = d2)
summary(m1)
d2 |> plot_grouped_box_violin("arousal", "funny")
m2 <- lm(funny ~ arousal,data = d2)
summary(m2)
d2 |> plot_scatter("violation", "funny")
m3 <- lm(funny ~ violation,data = d2)
summary(m3)
d2 |> plot_grouped_box_violin("accept", "funny")
m4 <- lm(funny ~ accept,data = d2)
summary(m4)
d2 |> plot_grouped_box_violin("jump", "funny")
m5 <- lm(funny ~ jump,data = d2)
summary(m5)
m2 <- lm(funny ~ state*arousal,data = d2)
summary(m2)
m4 <- lm(funny ~ violation*accept,data = d2)
summary(m4)
d2 |> plot_grouped_box_violin("jump", "funny")
m5 <- lm(funny ~ jump,data = d2)
summary(m5)
summary(m3)
d2 |> plot_grouped_box_violin("jump", "funny")
summary(m4)
summary(m3)
library(janitor, include.only = "clean_names")
library(cowplot, include.only = "plot_grid")
library(kableExtra, exclude = "group_rows")
library(tidyverse)
library(tidymodels)
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true")
#load data
d <- read_csv("humor_r.csv")
#calculate the total violation value
d$violation1 <- d$violation1_1 + d$violation1_2 + d$violation1_3 + d$violation1_4 + d$violation1_5
d$violation2 <- d$violation2_1 + d$violation2_2 + d$violation2_3 + d$violation2_4 + d$violation2_5
d$violation3 <- d$violation3_1 + d$violation3_2 + d$violation3_3 + d$violation3_4 + d$violation3_5
d$violation4 <- d$violation4_1 + d$violation4_2 + d$violation4_3 + d$violation4_4 + d$violation4_5
d$violation5 <- d$violation5_1 + d$violation5_2 + d$violation5_3 + d$violation5_4 + d$violation5_5
View(d)
state <- c(d$state,d$state,d$state,d$state,d$state)
funny <- c(d$funny1,d$funny2,d$funny3,d$funny4,d$funny5)
arousal <- c(d$arousal1,d$arousal2,d$arousal3,d$arousal4,d$arousal5)
violation <- c(d$violation1,d$violation2,d$violation3,d$violation4,d$violation5)
jump <- c(d$jump1,d$jump2,d$jump3,d$jump4,d$jump5)
accept <- c(d$accept1,d$accept2,d$accept3,d$accept4,d$accept5)
d2<- data.frame(state,funny,arousal,violation,jump,accept)
View(d2)
View(d2)
View(d)
library(janitor, include.only = "clean_names")
library(cowplot, include.only = "plot_grid")
library(kableExtra, exclude = "group_rows")
library(tidyverse)
library(tidymodels)
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true")
#load data
d <- read_csv("humor_r.csv")
#calculate the total violation value
d$violation1 <- d$violation1_1 + d$violation1_2 + d$violation1_3 + d$violation1_4 + d$violation1_5
d$violation2 <- d$violation2_1 + d$violation2_2 + d$violation2_3 + d$violation2_4 + d$violation2_5
d$violation3 <- d$violation3_1 + d$violation3_2 + d$violation3_3 + d$violation3_4 + d$violation3_5
d$violation4 <- d$violation4_1 + d$violation4_2 + d$violation4_3 + d$violation4_4 + d$violation4_5
d$violation5 <- d$violation5_1 + d$violation5_2 + d$violation5_3 + d$violation5_4 + d$violation5_5
state <- c(d$state,d$state,d$state,d$state,d$state)
funny <- c(d$funny1,d$funny2,d$funny3,d$funny4,d$funny5)
arousal <- c(d$arousal1,d$arousal2,d$arousal3,d$arousal4,d$arousal5)
violation <- c(d$violation1,d$violation2,d$violation3,d$violation4,d$violation5)
jump <- c(d$jump1,d$jump2,d$jump3,d$jump4,d$jump5)
accept <- c(d$accept1,d$accept2,d$accept3,d$accept4,d$accept5)
d2<- data.frame(state,funny,arousal,violation,jump,accept)
View(d2)
model_1 <- lm(funny ~ state*arousal, data = d2)
summary(model_1)
model_1 <- lm(funny ~ state+arousal, data = d2)
summary(model_1)
model_2 <- lm(funny ~ violation+accept, data = d2)
summary(model_2)
model_2 <- lm(funny ~ violation*accept, data = d2)
summary(model_2)
model_3 <- lm(funny ~ jump, data = d2)
summary(model_3)
plot(model_1, which = 1)
coefplot(model_1)
install.packages("coefplot")
library(coefplot)
coefplot(model_1)
barplot(model_1)
summary(model_1)
predicted_values <- predict(model_1)
hist(predicted_values, main = "Histogram of Predicted Values", xlab = "Predicted Values")
library(ggplot2)
predicted_values <- predict(model_1)
d2$predicted_values <- predicted_values
ggplot(your_data, aes(x = predicted_values, fill = state)) +
geom_histogram(binwidth = 1, position = "dodge") +
facet_wrap(~arousal, scales = "free") +
labs(title = "Distribution of y for different x1 and x2 combinations",
x = "Predicted Values", y = "Frequency")
ggplot(d2, aes(x = predicted_values, fill = state)) +
geom_histogram(binwidth = 1, position = "dodge") +
facet_wrap(~arousal, scales = "free") +
labs(title = "Distribution of y for different x1 and x2 combinations",
x = "Predicted Values", y = "Frequency")
d2 |> plot_grouped_box_violin("state", "funny")
m2 <- lm(funny ~ state*arousal,data = d2)
summary(m2)
model_1 <- lm(funny ~ state*arousal, data = d2)
summary(model_1)
model_2 <- lm(funny ~ violation*accept, data = d2)
summary(model_2)
model_3 <- lm(funny ~ jump, data = d2)
summary(model_3)
summary(model_2)
summary(m2)
d2 |> plot_scatter("violation", "funny")
d2 |> plot_grouped_box_violin("accept", "funny")
m4 <- lm(funny ~ violation*accept,data = d2)
summary(m4)
View(d2)
model_1 <- lm(funny ~ state*arousal*jump, data = d2)
summary(model_1)
summary(m2)
summary(model_1)
View(d2)
View(d2)
View(d)
m2 <- lm(funny ~ state*arousal*jump,data = d2)
summary(m2)
m4 <- lm(funny ~ violation*accept*jump,data = d2)
summary(m4)
m5 <- lm(funny ~ jump,data = d2)
summary(m5)
summary(m2)
summary(m4)
summary(m5)
m2 <- lm(funny ~ state+arousal+jump,data = d2)
summary(m2)
